------------------------------------------------------------------------------
Debugging
------------------------------------------------------------------------------
import pdb
pdb.run(statement)            # execute statement under debugger control
pdb.runeval(expression)       # execute expression under debugger control
pdb.runcall(function_obj)     # execute function under debugger control             

pdb.set_trace()               # start debugger at this point in program
breakpoint()                  # start debugger at this point in program; equivalent to pdb.set_trace()

pdb.post_mortem(tb)           # use debugger to debug traceback which defaults to the current exception

# commands
h(elp) [command]
q(uit)                                 # quit debugger

b(reak) [line|function] [, condition]  # set breakpoint on a line number of function, returns breakpoint number
condition bpnumber [condition]         # set condition (an expression that must be true for breakpoint to occur), removes all conditions if no condition is passed
ignore bpnumber [count]                # ignore breakpoint count times
tbreak                                 # temporary breakpoint, removed after first hit
cl(ear)                                # clear breakpoints by line number or breakpoint number
disable                                # disable breakpoints by breakpoint number
enable                                 # enable breakpoints by breakpoint number

s(tep)                                 # execute current line (steps inside a function) and stop
n(ext)                                 # execute current line (does not step inside a function) and stop
un(til) line                           # execute until line number
r(eturn)                               # execute until current function returns
c(ont(inue))                           # execute until breakpoint occurs

p expression                           # evaluate and print expression
pp expression                          # evaulate and pretty print expression
display [expression]                   # print expression if changed
undisplay [expression]                 # undo display command
a(rgs)                                 # print arguments of current function
l(ist) [startline[, endline]]          # list source code around current or specified lines

u(p) [count]                           # go up count stackframes
d(own)                                 # go down count stackframes

------------------------------------------------------------------------------
Unit Testing
------------------------------------------------------------------------------
import unittest

------------------------------------------------------------------------------
Type Hints
------------------------------------------------------------------------------
x: int = 1
x: float = 1.0
x: bool = True
x: str = "test"
x: bytes = b"test"

from typing import List, Tuple, Set, Dict
x: List[int] = [1]
x: Tuple[int, ...] = (1, 2, 3)
x: Tuple[str, int] = ("string", 2)
x: Set[int] = {6, 7}
x: Dict[str, float] = {'field': 1.0}

from typing import Mapping, MutableMapping
x: Mapping[str, int]                   # a Dict[str, int] like object that will not be mutated; has a __getitem__ method 
x: MutableMApping[str, int]            # a Dict[str, int] like object that could be mutated; has both __getitem__ and __setitem__ methods

from typing import Sequence, Iterable
x: Sequence[int] = [1, 2, 3]           # Sequences have __len__ and __getitem__ methods
x: Iterable[int] = [1, 2, 3]           # Iterables have __iter__ method which returns an iterator

from typing import Iterator, Callable
def number_generator(start: int, end: int) -> Iterator[int]:
    ...
gen: Callable[[int, int], Iterator[int]] = number_generator
x: int = gen(start=1, end=5)

from typing import Union, Optional, Any
x: Union[str, float, bool]             # x could be either of these types
x: Optional[str]                       # x could either be str or None; equivalent to Union[str, None]
x: Any                                 # x could be any type, used when a variable is too dynamic to assign a type

from typing import IO
x: IO[str] = open(FILEPATH)            # an IO object

from typing import TypeVar
MyType = TypeVar('MyType', int, str)   # could either be int or str; linters try to infer such arguments to be as specific as possible

class MyClass:
    def __init__(self) -> None:        # do not annotate self; __init__ returns None 
        ...

------------------------------------------------------------------------------
Virtual Environment
------------------------------------------------------------------------------
$python -m venv virtual_env_dir
$source virtual_env_dir/bin/activate
$pip install -r requirements.txt
$deactivate

------------------------------------------------------------------------------
Profiling
------------------------------------------------------------------------------
$python -m cProfile [-o output_file] [-s sort_order] (-m module | myscript.py)

import cProfile
cProfile.run('for i in range(1000)')

------------------------------------------------------------------------------
Benchmark
------------------------------------------------------------------------------
import time
time.clock()  # seconds past since Jan 1, 1970; optimal for Windows
time.time()   # seconds past since Jan 1, 1970; optimal for other operating systems

import timeit
setup_code = "L = [1, 2, 3]"
test_code = """
	i = 0                          
	while i < len(L):            # alternatively, use '\n' for line breaks and '\t' for indentation
		L[i] += 1
		i += 1
"""
timeit.timeit(setup=setup_code,  # will run before test code but won't contribute to measured time 
			  stmt=test_code,
			  number=100)        # run code `number` times and return this total time
timeit.repeat(setup=setup_code,
			  stmt=test_code, 
			  number=100,
			  repeat=5)          # repeat the above `repeat` times and return a vector of length `repeat`

$python -m timeit -n 100 -r 5 -s "L=[1, 2, 3]" "i=0\nwhile i < len(L):\n\tL[i]+=1\n\ti += 1"
$python -m timeit -n 100 -r 5 -s "L=[1, 2, 3]" "i=0" "while i<len(L):" "    L[i]+=1" "    i+=1"

------------------------------------------------------------------------------
Regular Expressions
------------------------------------------------------------------------------
import re

string = 'abc'

# match

# search

# findall

# substitute

------------------------------------------------------------------------------
Persistent Storage
------------------------------------------------------------------------------
# save object to disk
import pickle

# save object to disk using key-value pair
import shelve
db = shelve.open(filepath)
db['ml_model'] = model
db['plot'] = plot
db.close()

# load
db = shelve.open(filepath)
model = db['model']
plot = db['plot']
db.close()

