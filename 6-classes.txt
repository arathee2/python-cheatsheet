------------------------------------------------------------------------------
Concepts
------------------------------------------------------------------------------
- ClassName.method(instance) and instance.method() are equivalent.

# Inheritence
- Classes support multiple inheritence.
- `instance.attribute` kicks off inheritence search in the following order: bottom to top (inheritence hierarchy), left-to-right (multiple superclasses).
- instance.__dict__['attribute'] does not kick off inheritence and accesses the attribute from the class it was created from.
- Supports method overriding.

# Polymorphism
- Supports operator overloading.

# Encapsulation
- There is no notion of private or protected variables in Python OOP.
- All attributes are public by default.

------------------------------------------------------------------------------
Syntax
------------------------------------------------------------------------------
class ClassName(SuperClassA, SuperClassB):    # class --> ClassName object
    self.attrA = ...                          # an attribute that will belong to ClassName instances
    
    def methodName(self, arg):                # an attribute similar to attrA; a method; could be accessed by ClassName.methodName or called by ClassName.methodName(arg)
        print(self.attrA)
        print(arg)

ClassName.attrB = ...                         # possible but stupid; class attribute: instances will be able to access this attribute
ClassName.anotherMethod = someMethod(obj)     # same as above but for methods (remember, methods are attributes); this is why methods need `self` argument (`obj` in this case)
instance = ClassName()
instance.attrC = ...                          # possible but stupid; instance attribute: no other instances can access this attribute
instance.methodName(0)                        # if self.attrA was not assigned (e.g. if assignment was in another function) this method call would be an error

