------------------------------------------------------------------------------
Concepts
------------------------------------------------------------------------------
- A class has two kinds of attributes: variables and methods.
    - Variables are of two kinds: instance and class variables.
    - Methods are of three kinds: instance, class and static methods.
- Attributes can be created inside as well as outside the class.
- Attribute assignment (object.attr = ...) assigns the attribute to that namespace i.e either instance or class depending on what object refers to.
- Attribute reference (object.attr) kicks off inheritence search in the following order: bottom to top (instance -> class -> super class), left-to-right (multiple superclasses).
- When interpreter reacher the class statement, it creates the class object and runs all its statements that result in creation of top-level attributes (fields and methods).
- Attributes created inside methods only spring into existence when methods are run.
- ClassName.method(instance) and instance.method() are equivalent.

# Inheritence
- Attribute reference (object.attr) kicks off inheritence search in the following order: bottom to top (instance -> class -> super class), left-to-right (multiple superclasses).
- object.__dict__ contains the attribute names and values where object could be a class or an instance. object.__dict__['attr'] could also be used for assignment or reference.
- instance.__dict__['attribute'] does not kick off inheritence and accesses the attribute from the class it was created from.
- Supports multiple inheritence.
- Supports method overriding.
- Supports abstract classes.

# Polymorphism
- Supports operator overloading.

# Encapsulation
- There is no notion of private or protected attributes in Python OOP.
- All attributes can be accessed (assignment and reference) inside or outisde the class.

------------------------------------------------------------------------------
Coding Classes
------------------------------------------------------------------------------
# trivial example
class MyClass():                                  # MyClass points to a class object
    pass

instance_name = MyClass()                         # create instance of MyClass

# real-world example
class Manager(Person, Employee):                  # class statement runs all statements within class body resulting in creation of methods and class variables.

    has_subs = True                               # class variable (= static variable): shared across all instances; access using `Manager.has_subs` as wells as `instance.has_subs`
    self.n_subs = 1                               # instance variable: specific to each instance; access using `instance.n_subs`
    
    _tax_rate = 0.05                              # pseudo private variable: meant not to be accessed outside the class as per convention; leading underscore has no special meaning for the interpreter
    self._team = 'undefined'
    __raise = 0.15                                # name mangling: name starting with two leading underscores that doesn't end with two underscores is expanded to _Manager__raise (i.e. _ClassName__attr)  to avoid name collision in class hierarchy
    self.__salary = 0                             # name mangled to self._Manager__salary
    
    def __init__(self, name, title, n_subs):      # constructor
        Person.__init__(self, name)               # call to super class; avoid using __super__
        Employee.__init__(self, title)            
        self.n_subs = n_subs                      

    def __str__(self):                            # operator overloading
        return f"""{self.name},
                   {self.title},
                   {self.n_subs}"""

    def give_bonus(self):                         # instance method: instance object is passed as the first argument
        pass                                      # call using `instance.give_bonus()` or `Manager.give_bonus(instance)`

    @classmethod
    def num_managers(cls):                        # class method: class object is passed as the first argument -- useful for handling data local to a class (excluding subclasses)
        pass                                      # call using `instance.num_managers()` or `Manager.num_managers()`

    @staticmethod
    def num_managers():                           # static method: neither instance nor class is passed -- useful for handling data local to a class (including all subclasses)
        pass                                      # call using `instance.num_managers()` or `Manager.num_managers()`
        
    def _tax_amount(self):                        # pseudo private method: meant to be used inside this class; overriding this is possible
        pass

    def __get_clubs(self):                        # name mangled to self._Manager__get_clubs(); overriding is not possible because name mangling results in a unique name at runtime
        pass

Manager.gender = 'undefined'                      # class attributes can be assigned outside the class too
Manager.identity = lambda x: return x             # class method being assigned outside the class

peter = Manager("Peter", "Tech Lead", 3)          # create instance of class with arguments to the constructor
peter.age = 35                                    # instance attributes can be assigned outside the class; refer using
peter.get_subs = lambda self: self.n_subs         # instance method being assigned outside the class

peter.__dict__                                    # access attributes of this class (excludes superclass attributes)
peter.__class__                                   # access the class object has in turn another attributes such as __name__ and __bases__; equivalent to `type(peter)`

------------------------------------------------------------------------------
Operator Overloading
------------------------------------------------------------------------------
class Person:
      def __init__(self, name, age):              #  constructor
          self.name = name
          self.age = age

      def __del__(self):                          # destructor
          pass

      def __add__(self, other):                   # invoked when `instance + other`; could return any type of result
          pass

      def __radd(self, other):                    # invoked when `other + instance` 
          pass

      def __iadd__(self, other):                  # invoked when `instance += other`; this is an optional method (for efficient in-place addition) because fallback is __add__
          pass

      def __call__(self, *args, **kwargs):        # invoked when `object(*args, **kwargs)` i.e. when object is called. Arguments could be arbitrarily defined
          pass
      
      def __getitem__(self, index):               # for index and slice reference expressions; also used as fallback iterator by repeatedly indexing from 0 until StopIteration occurs
          if isinstance(index, int):              # when instance[i] is invoked, i is passed as the second argument
              pass
          elif isinstance(slice):                 # when instance[i:j:k] is invoked, slice(i, j, k) is passed as the second argument
              pass

      def __setitem__(self, index, value):        # for index and slice assignments
          pass

      def __iter__(self):                         # returns iterator object upon running `iter(object)`; iterator object has to have the __next__() method; return self and implement __next__ in the same class for single iteration scan; return an iterable object that is implemented in a different class with __next__ to support multiple scans
          pass

      def __next__(self):                         # invoked when `next(object)` or `for i in object:` is run; returns the next item in sequence; usually implemented in iterator class
          pass

      def __contains__(self, value):              # invoked when doing memberships tests such as x in y; return True is class contains value; fallback methods in case this is absent are __iter__ and __getitem__
          pass

      def __getattr__(self, attrname):            # invoked when `object.attrname` or `getattr(object, attrname)` i.e. attribute reference - for an undefined attribute; can be used to emulate attribute privacy
          if attrname == 'age'
              return 40
          else:
              raise AttributeError(attrname)

      def __getattribute__(self, attrname):       # invoked when `object.attrname` i.e. attribute reference - for all attributes, not just undefiend ones; can be used to emulate attribute privacy
          pass
          
      def __setattr__(self, attrname, value):     # invoked when `object.attrname = value` or `setattr(object, attrname, value)` i.e. attribute assignment for all attributes, not just undefined ones; can be used to emulate attribute privacy
          if attrname == 'age':
              self.__dict__[attrname] = value     # don't do self.attrname = value because that calls __setattr__ again ending up in an infinite loop
          else:
              raise AttributeError(attrname,
              'cannot be assigned')

      def __delattr__(self, attrname):            # invoked when `del object.attrname`
          if attrname in self__dict__:
             del self.__dict__[attrname]
          else:
          raise AttributeError(attrname,
          'does not exist!')

      def __lt__(self, other):                    # invoked when `object < other`; all comparison operators have their correponding methods
          return self.data < other

      def __bool__(self):                         # invoked when `bool(object)` and inside if statements; if not present, __len__ is used as fallback; if __bool__ and __len__ both are missing then True is returned regardless
          pass

      def __len__(self):                          # invoked when `len(object)`; used as fallback for `bool(object)`, False if length is zero, True otherwise
          pass
          
      def __index__(self):                        # invoked when bin(instance), oct(instance) and hex(instance) is encountered
          return hash

      def __str__(self):                          # returns string representation of object when `print(object)` and `str(object)`
          return string_representation

      def __repr__(self):                         # returns a string when `repr(object)` that shows how the object was constructed; used as fallback when __str__ is not present
          return repr_representation

------------------------------------------------------------------------------
Abstract Class
------------------------------------------------------------------------------
from abc import ABCMeta, abstractmethod
class AbstractClass(metaclass=ABCMeta):
    @abstractmethod
    def method():
        pass

abstract = AbstractClass()                        # error! classes with abstract method cannot be instantiated; define a subclass that defiend this method and instantiate that subclass

------------------------------------------------------------------------------
Advanced
------------------------------------------------------------------------------
- Slots: Define what attributes is the class allowed to have.
- Properties: Define what methods to invoke upon getting, setting, deleting and asking for docs of a specific attribute.
- Class Decorators and Metaclasses: Classes are instance of metaclasses. 

