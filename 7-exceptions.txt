------------------------------------------------------------------------------
Coding Exceptions
------------------------------------------------------------------------------
class MyException(Exception):
    def __init__(self):                 # overload this for exception specific use case
        pass                            # Exception's __init__'s `args` attribute collects all arguments in a tuple
    
    def __str__(self):                  # overload this for exception specific use case
        pass                            # Exception's __str__ prints constructor arguments stored in `args` tuple

------------------------------------------------------------------------------
Raising Exception
------------------------------------------------------------------------------
# raise an exception (an exception is a class instance)
raise MyException()                     # raise an instance
raise MyException                       # create and raise an instance with no constructor arguments
raise                                   # re-raise the most recent instance
raise MyException() from TypeError()    # attach TypeError() to MyException()'s __cause__; shown in exception message

# assert
assert test, data                       # syntactic sugar for `if not test: raise AssertionError(data)`; data is optional

------------------------------------------------------------------------------
Catch Exceptions
------------------------------------------------------------------------------
# try-except-else-finally statement
try:
    # code that could raise an exception
except MyException:
    # code that runs after catching a specific exception (of the type MyException) in the try clause
except ExceptionA as e:
    # assign instance of a specific exception to variable e
    print(e.args)                       # args contains arguments passed to the exception instance constructor
    print(e)                            # prints string returned by the __str__  method
except (ExceptionB, ExceptionC):
    # catch any of the exceptions
except (ExceptionD, ExceptionE) as e:
    # catch any of the exceptions and assign instance to variable e
except:
    # catches all (or all other) exceptions, prefer `except Exception` to avoid catching system exits
    print(sys.exc_info()[0])            # sys.exc_info returns exception's (type, value, traceback_object); useful when we don't have a variable that points to the exception instance
    import traceback as t
    t.print_tb(sys.exc_info[2])
    t.print_exception(*sys.exc_info())  # equivalent shorthand `traceback.print_exc()` automatically passes the arguments passed here
else:
    # optional clause, runs when no exception occurs, can be coded if at least one except block present
finally:
    # optional clause, runs regardless of whether or not an exception occurs

------------------------------------------------------------------------------
Control Flow
------------------------------------------------------------------------------
- Raise Exception:
    - Raise an exception using the raise statement.
    - An exception is an instance of a class that inherits Exception.

- Find try:
    - Propagate the exception up the function call stack (zero or more levels) until a try statement is found.
    - Stop program execution and print the exception details if no try statement is found.

- Find except:
    - Search for an except clause (from top to bottom) that contains the class reference to which the instance belongs to.
    - If `except Exception as e` then e refers to the exception instance that was created by raise.
    - Go to 'find try' step if except is not found (i.e. propagate the exception looking for a try)
    
- Execute except:
    - Execute code inside except.
    - Exception instance is destroyed if it is not re-raised.
    - Go to 'find try' step if another exception is raised or the same exception is re-raised using the `raise` statement.

- Execute code in else clause if no exception occurs.

- Execute code in finally clause regardless of whether:
    - an exception did not occur in try.
    - an exception occured in try and was handled.
    - an exception occured in try and was not handled.
    - an exception occured while handling an exception.

- Return control back to the statement immediately followed by the try statement.

------------------------------------------------------------------------------
Try-Finally Alternative
------------------------------------------------------------------------------
# syntax
with expression [as var]:                 # as var is optional and refers object created by the expression
    # code that could raise an exception

# example
with open(filepath, mode) as fin:
    # code that could raise an exception

# control flow
- Assign object created from the reference to var if present.
- Run code in object's __enter__ method.
- Run code inside with statement.
- Run code in object's __exit__ method regardless of whether or not an exception occurs.
    - If an exception does not occur, run __exit__ and then the code that follows the with statement.
    - If an exception occurs, run __exit__ and raise the exception.

------------------------------------------------------------------------------
Tips
------------------------------------------------------------------------------
- Don't be to generic while handling exceptions -- careful while using `except` or `except Exception` since they mask exceptions that you don't want to be handled silently!
    - `except` handles SystemExit and KeyboardInterrupt exceptions.
    - `except Exception` handles SyntaxError exception.
- Don't be too specific while handling exceptions -- one needs to add more `except NewExceptionName` statements later if code raises new exceptions in the future.
- A good rule of thumb is to design an exception class heirarchy specific to your program:
    - `except ExceptionSuperClass` catches all errors related to your program.
    - `except ExceptionSubClass` catches specific errors related to your program.

